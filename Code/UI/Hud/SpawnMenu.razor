@using Sandbox.UI
@using Sandbox.UI.Construct

@inherits Panel

<root />

@code
{
    public static SpawnMenu Instance { get; protected set; }

    readonly Panel toollist;

    private static ModelList modelList;

    private bool isSearching;

    public SpawnMenu()
    {
        Instance = this;

        var left = Add.Panel("left");
        {
            var tabs = left.AddChild<ButtonGroup>();
            tabs.AddClass("tabs");

            var body = left.Add.Panel("body");
            {
                modelList = body.AddChild<ModelList>();
                tabs.SelectedButton = tabs.AddButtonActive("#spawnmenu.modellist", (b) => modelList.SetClass("active", b));

                var ents = body.AddChild<EntityList>();
                // tabs.AddButtonActive("#spawnmenu.entities", (b) => ents.SetClass("active", b));

                var npclist = body.AddChild<NpcList>();
                // tabs.AddButtonActive("#spawnmenu.npclist", (b) => npclist.SetClass("active", b));

                var props = body.AddChild<SpawnList>();
                tabs.AddButtonActive("#spawnmenu.props", (b) => props.SetClass("active", b));
            }
        }

        var right = Add.Panel("right");
        {
            var tabs = right.Add.Panel("tabs");
            {
                tabs.Add.Button("#spawnmenu.tools").AddClass("active");
                tabs.Add.Button("#spawnmenu.utility");
            }

            var body = right.Add.Panel("body");
            {
                toollist = body.Add.Panel("toollist");
                {
                    RebuildToolList();
                }

                body.Add.Panel("inspector");
            }
        }
    }

    void RebuildToolList()
	{
		toollist.DeleteChildren( true );

		foreach ( var entry in TypeLibrary.GetTypes<BaseTool>() )
		{
			if ( entry.Name == "BaseTool" )
				continue;

			var button = toollist.Add.Button( entry.Title );
			button.SetClass( "active", entry.ClassName == ConsoleSystem.GetValue( "tool_current" ) );

			button.AddEventListener( "onclick", () =>
			{
				SetActiveTool( entry.ClassName );

				foreach ( var child in toollist.Children )
					child.SetClass( "active", child == button );
			} );
		}
	}

    void SetActiveTool(string className)
    {
        ConsoleSystem.Run("tool_current", className);
        ConsoleSystem.Run("select_weapon", "Tool Gun");
    }

    public override void Tick()
    {
        if (modelList.SearchInput.HasFocus)
        {
            isSearching = true;
        }
        else if (isSearching && Input.Pressed("Menu"))
        {
            isSearching = false;
        }

        if (isSearching)
            return;

        SetClass("spawnmenuopen", Input.Down("menu"));
    }
}
